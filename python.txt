Data structures

Tuples
- could be understood as arrays with special features
- homogenious or heterogenious - containg data of same or different types
- immutable - elements of tuple cannot change (caution!: content of variable contained in tuple can change)
  a = 10
  my_tuple = (a, 'randomString', 13)
  my_tuple
  --> (10, 'randomString', '13')
  a = 13
  print(my_tuple)
  --> (13, 'randomString', '13')
- iterable - values of tuple can be accessed individually by looping with 'for'  
  for item in my_tuple:
    print(item)
- defined by comas, not parenthesis
  my_tuple = 10, 'randomString', 13
- content is zero indexed and accessible by index
  my_tuple = 10, 'randomString', 13
  print(my_tuple[1])
  --> 'randomString'
- could be unpacked in easy way
  my_tuple = 10, 'randomString', 13
  ten, stringValue, thirteen = my_tuple
  print(ten)
  --> 10
- unpacking first and last values with use of '*_' to dump all the middle values
  my_tuple = 1, 2, 3, 5, 6
  a, b, *_, e
  print(a)
  --> 1
  print(b)
  --> 2
  print(e)  
  --> 6
- slice content like
  my_tuple = 1, 2, 3, 5, 6
  print(my_tuple[2:4])
  --> (3, 5)
  
 Named Tuples
- part of Python Standard Library - collections module
  https://docs.python.org/3/library/collections.html#collections.namedtuple
- is not a separate data type
- it is a function to generate classes
- needs to be imported
  from collections import namedtuple
- syntax
  Point2D = namedtuple('Point2D', ['x','y'])
- instantiation
  pt1 = Point2D(10,20)
- access parameters with dot notation
  pt.x
  --> 10
  pt.y
  --> 20
- get parameter names
  Point2D = namedtuple('Point2D', ['x','y'])
  Point2D._fields
  --> ('x', 'y')

 
 
 
  
  
